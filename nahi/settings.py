"""
Django settings for nahi project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'epb1m@ku&0%7nklzpi#*2!=r!fu5q)#)ko_a6(0fvlti%tz+5('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

## read config
from nahi.config import Config

# Application definition

INSTALLED_APPS = (
    'easy_select2', # pip install django-easy-select2
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework_mongoengine',
    'rest_framework',
    'corsheaders',
    'imagekit',
)

MIDDLEWARE_CLASSES = (
    #'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'nahi.middleware.CORSMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    #'django.middleware.cache.FetchFromCacheMiddleware',
)


ROOT_URLCONF = 'nahi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]



UPLOAD_URL = ""
STATIC_URL = ""

CORS_URLS_REGEX = r'^sso/.*$'
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = False
CORS_ORIGIN_WHITELIST = [
    ''
]
#CORS_REPLACE_HTTPS_REFERER = False
MEDIA_ROOT = Config.MEDIA_ROOT
#sMEDIA_URL = Config.MEDIA_URL

# Created Folder Log
import datetime
from django.utils.dateformat import DateFormat
dateNow = datetime.datetime.now()
df = DateFormat(dateNow)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
        'minimum': {
            'format': '%(message)s'
        }
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'logs/log-'+ str(df.format('Y-m-d')) +'.log',
            'formatter': 'verbose'
        },
        'api_profile' : {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'api_profile/log-'+ str(df.format('Y-m-d')) +'.log',
            'formatter': 'minimum'
        }
    },
    'loggers': {
        'nahi': {
            'handlers': ['file'],
            'propagate': True,
            'level': 'DEBUG',
        },
        'api_profile': {
            'handlers': ['api_profile'],
            'propagate': True,
            'level': 'INFO',
        },
    }
}

CORS_ALLOW_HEADERS = (
        'x-requested-with',
        'content-type',
        'accept',
        'origin',
        'authorization',
        'x-csrftoken'
    )

REST_FRAMEWORK = {
    # Use hyperlinked styles by default.
    # Only used if the `serializer_class` attribute is not set on a view.
    'DEFAULT_MODEL_SERIALIZER_CLASS':
        'rest_framework.serializers.HyperlinkedModelSerializer',

    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        #'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework_xml.parsers.XMLParser',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework_xml.renderers.XMLRenderer',
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
        'rest_framework.renderers.TemplateHTMLRenderer'
    ),
    'EXCEPTION_HANDLER': 'nahi.utils.custom_exception_handler'
}

WSGI_APPLICATION = 'wsgi.application'

CORS_ALLOW_METHODS = (
        'GET',
        'POST',
        'PUT',
        'PATCH',
        'DELETE',
        'OPTIONS'
    )

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = Config.DATABASES

DATABASE_ROUTERS = Config.DATABASE_ROUTERS

TEMPLATE_CONTEXT_PROCESSORS = {
    "django.core.context_processors.tz",
    'django_facebook.context_processors.facebook',
    # and add request if you didn't do so already
    'django.core.context_processors.request',
    'django.core.context_processors.i18n', # this one
}

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = Config.TIME_ZONE

USE_TZ = False

SESSION_COOKIE_SECURE = False
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTOCOL', 'https')
CSRF_COOKIE_SECURE = False

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static/")

APPEND_SLASH=False


#language
USE_I18N = True
USE_L10N = True
ugettext = lambda s: s
LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale/'),
)


from django.utils.translation import ugettext_lazy

LANGUAGES = (
    ('en', ugettext('English')),
    ('vi', ugettext('Viet Nam'))
)

ROOT_URLCONF = 'nahi.urls'
LANGUAGE_CODE = 'vi'

USE_THOUSAND_SEPARATOR=True
THOUSAND_SEPARATOR='.'
NUMBER_GROUPING=3
